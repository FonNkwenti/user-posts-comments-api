#org: fonnkwenti
app: http-api
service: sls-crud-api

provider:
  name: aws
  runtime: nodejs16.x
  # stage: dev
  # region: us-east-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}-{sls:stage} #store DB name which we will be able to access from our Lambdas.
    # DYNAMODB_TABLE_NAME: ${self:service}-${sls:stage} #store DB name which we will be able to access from our Lambdas.

  # httpApi:
  #   cors: true
  # iam:
  #   role:
  #     statements:
  #       - Effect: "Allow"
  #         Action:
  #           - dynamodb:Scan
  #           - dynamodb:Query
  #           - dynamodb:PutItem
  #           - dynamodb:UpdateItem
  #           - dynamodb:GetItem
  #           - dynamodb:DeleteItem
  #           - "*"
  #         #Resource: !GetAtt postsTable.Arn #4 the permissions will be applied to the DynamoDB table itself and the second resource is an index on the table
  #         Resource: "*"

custom:
  postsTableName: posts-table-${self:provider.stage} # store our table name in a custom resource. we will append the stage to the end of the table. We will have a unique table for each stage

plugins:
  - serverless-iam-roles-per-function

functions:
  createUser:
    handler: backend/users.create
    #name: create-user
    #memorySize: 128 # allocated memory in mb
    #timeout: 5 # units in seconds
    events:
      - http:
          path: /users
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          # - "*"
          - "dynamodb:PutItem"
        # Resource: "*"
        Resource: !GetAtt postsTable.Arn
        # Resource:
        #   - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME}"

        #   - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME}/index/GSI1"

resources:
  Resources:
    postsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postsTableName} # this is the name that will appear on the AWS Cloud. we will pull the name from our custom resource
        # TableName: ${self:provider.environment.DYNAMODB_TABLE_NAME} # this is the name that will appear on the AWS Cloud. we will pull the name from our custom resource
        AttributeDefinitions: # specify an array of attributes to describe the key schema and indexes for the table. In other words the index which we will use to query the table
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: status
            AttributeType: S

        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
