# org: fonnkwenti
app: http-api
service: sls-crud-api

provider:
  name: aws
  runtime: nodejs16.x
  # stage: dev
  stage: ${sls:stage}
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}

custom:
  postsTableName: posts-comments-table-${sls:stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  createUser:
    handler: backend/users.create
    events:
      - http:
          path: /user
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt postsTable.Arn

  getUser:
    handler: backend/users.get
    events:
      - http:
          path: /user/{id}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt postsTable.Arn
  deleteUser:
    handler: backend/users.delete
    events:
      - http:
          path: /user/{id}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt postsTable.Arn
  createPost:
    handler: backend/posts.create
    events:
      - http:
          path: /post
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt postsTable.Arn
  updatePost:
    handler: backend/posts.update
    events:
      - http:
          path: /post/{id}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt postsTable.Arn
  deletePost:
    handler: backend/posts.delete
    events:
      - http:
          path: /post/{id}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt postsTable.Arn

resources:
  Resources:
    postsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postsTableName}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: status
            AttributeType: S

        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
